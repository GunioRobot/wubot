#!/usr/local/bin/perl -w
use strict;

use AnyEvent::Watchdog autorestart => 1, heartbeat => 300;

use AnyEvent;
use Getopt::Long;
use Sys::Hostname;
use YAML;

use Wubot::Logger;
my $logger = Log::Log4perl::get_logger( 'default' );

use Wubot::Config;
use Wubot::Reactor;
use Wubot::Reactor::MessagePoster;

my $message_directory = "$ENV{HOME}/wubot/reactor";

my $messenger = Wubot::LocalMessageStore->new();
my $poster    = Wubot::Reactor::MessagePoster->new();

my $config_src = <<"EOF";
---
rules:
  - name: strip HTML from subject
    condition: contains subject
    plugin: HTMLStrip
    config:
      field: subject
  - name: strip HTML from body
    condition: contains body
    plugin: HTMLStrip
    config:
      field: body
  - name: remove key field for messages that came from AppWubot
    condition: key =~ ^AppWubot
    plugin: DeleteField
    config:
      field: key
  - name: store message bodies in maildir
    condition: contains body
    plugin: Maildir
    config:
      path: $ENV{HOME}/wubot/mail
  - name: OSX Idle - add idle_mins to rrd
    condition: key =~ ^OsxIdle
    plugin: RRD
    config:
      base_dir: $ENV{HOME}/wubot/rrd
      type: GAUGE
      key: idle_min
  - name: OSX Idle - add active_mins to rrd
    condition: key =~ ^OsxIdle
    plugin: RRD
    config:
      base_dir: $ENV{HOME}/wubot/rrd
      type: GAUGE
      key: active_min
  - name: Work Hours - add total_idle to rrd
    condition: key =~ ^WorkHours
    plugin: RRD
    config:
      base_dir: $ENV{HOME}/wubot/rrd
      type: GAUGE
      key: total_idle
  - name: Work Hours - add total_active to rrd
    condition: key =~ ^WorkHours
    plugin: RRD
    config:
      base_dir: $ENV{HOME}/wubot/rrd
      type: GAUGE
      key: total_active
  - name: Uptime - add load01 to rrd
    condition: key =~ ^Uptime
    plugin: RRD
    config:
      base_dir: $ENV{HOME}/wubot/rrd
      type: GAUGE
      key: load01
  - name: Growl Notification
    condition: contains subject
    plugin: Growl
    config:
      image_dir: $ENV{HOME}/.icons
  - name: Console Notification
    condition: contains subject
    plugin: Console
    config: {}
  - name: suppress future growl notifications
    condition: contains subject
    plugin: AddField
    config:
      field: quiet_growl
      value: 1
  - name: suppress future voice notifications
    condition: contains subject
    plugin: AddField
    config:
      field: quiet_voice
      value: 1

EOF


my $config = YAML::Load( $config_src );

my $reactor = Wubot::Reactor->new( config => $config );

my $hostname = Sys::Hostname::hostname();
$hostname =~ s|\..*$||;

$logger->info( "Setting up timer..." );
my $end = AnyEvent->condvar;

my $timer = AnyEvent->timer( after    => 1,
                             interval => 5,
                             cb       => sub {

                                 while ( my $message = $messenger->get( $message_directory ) ) {
                                     react( $message );
                                 }
                             },
                         );

$logger->error( "Running..." );
$end->recv;
$logger->error( "Ended..." );


sub react {
    my ( $message ) = @_;

    $logger->debug( "Message received from: $message->{key}" );

    $reactor->react( $message );

    # if the message originated on this host, and the 'no_post' option
    # is not set, then forward the message to my App::Wubot instance
    if ( $message->{hostname} eq $hostname && ! $message->{no_post} ) {

        $poster->react( $message,
                        { url => 'http://wubot/cgi-bin/wubot-message.cgi', },
                    );
    }

}
