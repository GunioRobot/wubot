#!/usr/local/bin/perl -w
use strict;

use AnyEvent::Watchdog autorestart => 1, heartbeat => 300;

use AnyEvent;
use File::Path;
use Getopt::Long;
use Log::Log4perl qw(:easy);
use YAML;

my $options = {};

GetOptions (
    '-debug'      => \$options->{debug},
);

my $log_level;
if    ( $options->{debug}   ) { $log_level = "DEBUG" }
else  { $log_level = "INFO" }

Log::Log4perl->init(\ <<"EOT");
    log4perl.category = $log_level, Screen, Logfile
    log4perl.appender.Screen = Log::Log4perl::Appender::ScreenColoredLevels
    log4perl.appender.Screen.layout = Log::Log4perl::Layout::PatternLayout
    log4perl.appender.Screen.layout.ConversionPattern = %d> %m %n
    log4perl.appender.Screen.color.trace = cyan
    log4perl.appender.Screen.color.debug = blue
    log4perl.appender.Screen.color.info  = green
    log4perl.appender.Screen.color.warn  = magenta
    log4perl.appender.Screen.color.error = yellow
    log4perl.appender.Screen.color.fatal = red

    log4perl.appender.Logfile = Log::Dispatch::FileRotate
    log4perl.appender.Logfile.filename    = $ENV{HOME}/logs/wubot-agent.log
    log4perl.appender.Logfile.max         = 10
    log4perl.appender.Logfile.mode        = append
    log4perl.appender.Logfile.DatePattern = yyyy-MM-dd
    log4perl.appender.Logfile.TZ          = PST
    log4perl.appender.Logfile.layout      = Log::Log4perl::Layout::PatternLayout
    log4perl.appender.Logfile.layout.ConversionPattern = %d %m %n

EOT

my $logger = get_logger( 'default' );
$logger->warn( ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" );
$logger->warn( "Staring Up..." );

use Wubot::Check;
use Wubot::Config;
use Wubot::Reactor;

my $cache_directory = "$ENV{HOME}/wubot/cache";
unless ( -d $cache_directory ) {
    mkpath( $cache_directory );
}

my $config_directory = "$ENV{HOME}/wubot/config";
unless ( -d $config_directory ) {
    mkpath( $config_directory );
}

our $plugin_objs;
my $schedule;

my $config  = Wubot::Config->new( { root => $config_directory } );

my $reactor = Wubot::Reactor->new();

my $count;

PLUGIN:
for my $plugin ( $config->get_plugins() ) {
    $logger->debug( "Creating check instance for plugin: $plugin" );

    my $plugin_config = $config->get_plugin_config( $plugin );

    if ( exists $plugin_config->{enabled} ) {
        unless ( $plugin_config->{enabled} ) {
            $logger->warn( "Plugin disabled: $plugin" );
            next PLUGIN;
        }
    }

    $plugin_objs->{ $plugin }
        = Wubot::Check->new( { class      => $plugin_config->{plugin},
                               cache_file => "$cache_directory/$plugin.yaml",
                               reactor    => $reactor,
                               key        => $plugin,
                           } );

    $plugin_objs->{ $plugin }->init( $plugin_config );

    my $now        = time;
    my $delay      = $plugin_config->{delay} || 1;

    my $lastupdate = $plugin_objs->{ $plugin }->instance->get_cache->{lastupdate} || 0;

    my $schedule_time;
    if ( $lastupdate + $delay > $now ) {
        $schedule_time = $lastupdate + $delay;
    }
    else {
        $schedule_time = $now;
    }

    my $diff = $schedule_time - $now;
    $logger->debug( "Scheduling next run of $plugin in $diff seconds" );

    push @{ $schedule->{$schedule_time} }, $plugin;

    $count++;
}

if ( $count ) {
    $logger->info( "Initialized $count enabled plugin instances" );
}
else {
    $logger->logdie( "ERROR: no plugin config files processed in $config_directory" );
}

$logger->info( "Setting up timer..." );
my $end = AnyEvent->condvar;

my $timer = AnyEvent->timer( after    => 1,
                             interval => 5,
                             cb       => sub {

                                 my $now = time;

                                 for my $time ( sort keys %{ $schedule } ) {

                                     next if $time > $now;

                                     for my $plugin ( @{ $schedule->{$time} } ) {
                                         my $plugin_config = $config->get_plugin_config( $plugin );

                                         $plugin_objs->{$plugin}->check( $plugin_config );

                                         my $delay = $plugin_config->{delay} || 60;

                                         my $next = time + $delay;
                                         push @{ $schedule->{$next} }, $plugin;
                                     }

                                     delete $schedule->{$time};
                                 }
                             } );

$logger->error( "Running..." );
$end->recv;
$logger->error( "Ended..." );

