#!/usr/local/bin/perl -w
use strict;

use AnyEvent::Watchdog autorestart => 1, heartbeat => 300;

use AnyEvent;
use File::Path;
use Log::Log4perl qw(:easy);
use YAML;

Log::Log4perl->init(\ <<'EOT');
                log4perl.category = INFO, Screen
                log4perl.appender.Screen = Log::Log4perl::Appender::ScreenColoredLevels
                log4perl.appender.Screen.layout = Log::Log4perl::Layout::PatternLayout
                log4perl.appender.Screen.layout.ConversionPattern = %d> %m %n
                log4perl.appender.Screen.color.trace = cyan
                log4perl.appender.Screen.color.debug = blue
                log4perl.appender.Screen.color.info  = green
                log4perl.appender.Screen.color.warn  = magenta
                log4perl.appender.Screen.color.error = yellow
                log4perl.appender.Screen.color.fatal = red
EOT

my $logger = get_logger( 'default' );

use Wubot::Config;
use Wubot::Check;

my $cache_directory = "$ENV{HOME}/wubot/cache";
unless ( -d $cache_directory ) {
    mkpath( $cache_directory );
}

my $config_directory = "$ENV{HOME}/wubot/config";
unless ( -d $config_directory ) {
    mkpath( $config_directory );
}

my $message_directory = "$ENV{HOME}/wubot/messages";
unless ( -d $message_directory ) {
    mkpath( $message_directory );
}

our $plugin_objs;
my $schedule;

my $config  = Wubot::Config->new( { root => $config_directory } );

my $count;
for my $plugin ( $config->get_plugins() ) {
    $logger->info( "Creating check instance for plugin: $plugin" );

    my $plugin_config = $config->get_plugin_config( $plugin );

    $plugin_objs->{ $plugin }
        = Wubot::Check->new( { class      => $plugin_config->{plugin},
                               cache_file => "$cache_directory/$plugin.yaml",
                               reactor    => sub { store_messages( @_ ) },
                               key        => $plugin,
                           } );

    my $now = time;
    push @{ $schedule->{$now} }, $plugin;

    $count++;
}

unless ( $count ) {
    die "ERROR: no plugin config files processed in $config_directory";
}

$logger->info( "Setting up timer..." );
my $end = AnyEvent->condvar;

my $timer = AnyEvent->timer( after    => 1,
                             interval => 5,
                             cb       => sub {

                                 my $now = time;

                                 for my $time ( sort keys %{ $schedule } ) {

                                     next if $time > $now;

                                     for my $plugin ( @{ $schedule->{$time} } ) {
                                         my $plugin_config = $config->get_plugin_config( $plugin );

                                         $plugin_objs->{$plugin}->check( $plugin_config );

                                         my $delay = $plugin_config->{delay} || 60;

                                         my $next = time + $delay;
                                         push @{ $schedule->{$next} }, $plugin;
                                     }

                                     delete $schedule->{$time};
                                 }
                             } );

$logger->error( "Running..." );
$end->recv;
$logger->error( "Ended..." );


sub store_messages {
    my ( @messages ) = @_;

  MESSAGE:
    for my $message ( @messages ) {

        unless ( $message->{checksum} ) {
            warn "ERROR: Message sent without checksum: ", YAML::Dump( $message ), "\n";
            next MESSAGE;
        }

        my $message_file = "$message_directory/$message->{checksum}.yaml";

        $logger->debug( "\twrote: $message_file" );
        YAML::DumpFile( $message_file, $message );
    }

}
