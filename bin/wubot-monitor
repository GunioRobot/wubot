#!/usr/local/bin/perl -w
use strict;

use File::Path;
use YAML;

use Wubot::Monitor::Config;
use Wubot::Monitor::Check;

my $cache_directory = "$ENV{HOME}/wubot/cache";
unless ( -d $cache_directory ) {
    mkpath( $cache_directory );
}

my $config_directory = "$ENV{HOME}/wubot/config";
unless ( -d $config_directory ) {
    mkpath( $config_directory );
}

my $message_directory = "$ENV{HOME}/wubot/messages";
unless ( -d $message_directory ) {
    mkpath( $message_directory );
}

my $monitor_objs;
my $schedule;

my $config  = Wubot::Monitor::Config->new( { root => $config_directory } );
my $reactor = \&store_messages;

my $count;
for my $monitor ( $config->get_monitors() ) {
    print "Creating check instance for monitor: $monitor\n";

    my $monitor_config = $config->get_monitor_config( $monitor );

    $monitor_objs->{ $monitor }
        = Wubot::Monitor::Check->new( { class      => $monitor_config->{plugin},
                                        cache_file => "$cache_directory/$monitor.yaml",
                                        reactor    => $reactor,
                                    } );

    my $now = time;
    push @{ $schedule->{$now} }, $monitor;

    $count++;
}

unless ( $count ) {
    die "ERROR: no monitor config files processed in $config_directory";
}

print "Running...\n\n";

# check
while ( 1 ) {

    my $now = time;

    for my $time ( sort keys %{ $schedule } ) {

        next if $time > $now;

        for my $monitor ( @{ $schedule->{$time} } ) {
            #print "running check: $monitor\n";

            my $monitor_config = $config->get_monitor_config( $monitor );

            $monitor_objs->{$monitor}->check( $monitor_config );

            my $delay = $monitor_config->{delay} || 60;

            my $next = time + $delay;
            push @{ $schedule->{$next} }, $monitor;
        }

        delete $schedule->{$time};

    }

    sleep 5;
}

sub store_messages {
    my ( @messages ) = @_;

    for my $message ( @messages ) {

        my $message_file = "$message_directory/$message->{checksum}.yaml";

        #print "\t$message_file\n";
        #print YAML::Dump $message;
        YAML::DumpFile( $message_file, $message );
    }

}
