#!/usr/local/bin/perl -w
use strict;

use AnyEvent::Watchdog autorestart => 1, heartbeat => 300;

use AnyEvent;
use File::Path;
use YAML;

use Wubot::Config;
use Wubot::Check;

my $cache_directory = "$ENV{HOME}/wubot/cache";
unless ( -d $cache_directory ) {
    mkpath( $cache_directory );
}

my $config_directory = "$ENV{HOME}/wubot/config";
unless ( -d $config_directory ) {
    mkpath( $config_directory );
}

my $message_directory = "$ENV{HOME}/wubot/messages";
unless ( -d $message_directory ) {
    mkpath( $message_directory );
}

our $plugin_objs;
my $schedule;

my $config  = Wubot::Config->new( { root => $config_directory } );
my $reactor = \&store_messages;

my $count;
for my $plugin ( $config->get_plugins() ) {
    print "Creating check instance for plugin: $plugin\n";

    my $plugin_config = $config->get_plugin_config( $plugin );

    $plugin_objs->{ $plugin }
        = Wubot::Check->new( { class      => $plugin_config->{plugin},
                                        cache_file => "$cache_directory/$plugin.yaml",
                                        reactor    => $reactor,
                                    } );

    my $now = time;
    push @{ $schedule->{$now} }, $plugin;

    $count++;
}

unless ( $count ) {
    die "ERROR: no plugin config files processed in $config_directory";
}

print "Setting up timer...\n";
my $end = AnyEvent->condvar;

my $timer = AnyEvent->timer( after    => 1,
                             interval => 5,
                             cb       => sub {

                                 my $now = time;

                                 for my $time ( sort keys %{ $schedule } ) {

                                     next if $time > $now;

                                     for my $plugin ( @{ $schedule->{$time} } ) {
                                         #print "running check: $plugin\n";

                                         my $plugin_config = $config->get_plugin_config( $plugin );

                                         $plugin_objs->{$plugin}->check( $plugin_config );

                                         my $delay = $plugin_config->{delay} || 60;

                                         my $next = time + $delay;
                                         push @{ $schedule->{$next} }, $plugin;
                                     }

                                     delete $schedule->{$time};
                                 }
                             } );

print "Running...\n\n";
$end->recv;
print "Ended...\n";


sub store_messages {
    my ( @messages ) = @_;

    for my $message ( @messages ) {

        my $message_file = "$message_directory/$message->{checksum}.yaml";

        #print "\t$message_file\n";
        #print YAML::Dump $message;
        YAML::DumpFile( $message_file, $message );
    }

}
